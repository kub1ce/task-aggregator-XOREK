from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from database import init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from database import get_notifications, get_notification_by_id, update_notification_status, save_message_to_db
from models import Notification
from services.notification_processor import calculate_importance
from services.ai_generator import generate_ai_response

# –ò–ú–ü–û–†–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ô - –≠–¢–û –ó–ê–ü–£–°–¢–ò–¢ –ò–• –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ß–ï–†–ï–ó __init__.py
# –≠—Ç–æ —Ç–∞–∫–∂–µ –≤—ã–∑–æ–≤–µ—Ç init_db() –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
# import integrations

app = Flask(__name__)
CORS(app)

# –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ __init__.py –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
init_db() # –£–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ integrations/__init__.py

@app.route('/api/notifications', methods=['GET'])
def get_all_notifications():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    limit = int(request.args.get('limit', 50))
    offset = int(request.args.get('offset', 0))
    status = request.args.get('status', 'unread')
    importance = request.args.get('importance', None)

    notifications = get_notifications(limit=limit, offset=offset, status=status, importance=importance)
    return jsonify([n.to_dict() for n in notifications])

@app.route('/api/notifications/<int:notification_id>', methods=['GET'])
def get_single_notification(notification_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    notification = get_notification_by_id(notification_id)
    if notification:
        return jsonify(notification.to_dict())
    else:
        return jsonify({"error": "Notification not found"}), 404

@app.route('/api/notifications/<int:notification_id>', methods=['PUT'])
def update_notification(notification_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    data = request.get_json()
    new_status = data.get('status')

    if new_status not in ['unread', 'read', 'archived', 'delayed']:
        return jsonify({"error": "Invalid status"}), 400

    success = update_notification_status(notification_id, new_status)
    if success:
        return jsonify({"message": "Notification updated successfully"})
    else:
        return jsonify({"error": "Notification not found"}), 404

@app.route('/api/generate_ai_response/<int:notification_id>', methods=['POST'])
def generate_response(notification_id):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ò-–æ—Ç–≤–µ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    notification = get_notification_by_id(notification_id)
    if not notification or not notification.text_content:
        return jsonify({"error": "Notification not found or has no text content"}), 404

    ai_response = generate_ai_response(notification.from_user_id or notification.from_email, notification.text_content)
    if ai_response:
        return jsonify({"response": ai_response})
    else:
        return jsonify({"error": "Failed to generate AI response"}), 500

@app.route('/api/notifications', methods=['POST'])
def add_notification():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é."""
    data = request.get_json()
    source = data.get('source', 'manual')
    text_content = data.get('text_content')
    from_name = data.get('from_name', 'Manual Input')
    date = data.get('date', datetime.now().isoformat())

    if not text_content:
        return jsonify({"error": "Text content is required"}), 400

    notification = Notification(
        source=source,
        from_name=from_name,
        text_content=text_content,
        date=date,
    )

    notification.importance = calculate_importance(notification)

    notification_id = save_message_to_db(notification)
    if notification_id:
        notification.id = notification_id
        return jsonify(notification.to_dict()), 201
    else:
        return jsonify({"error": "Failed to save notification"}), 500

# ...
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º API –Ω–∞ –ø–æ—Ä—Ç—É 5000
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ù–ï –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∑–¥–µ—Å—å, —Ç.–∫. Pyrogram –æ—Ç–¥–µ–ª—å–Ω–æ
    print("üöÄ API –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:5000")
    # –í–ê–ñ–ù–û: use_reloader=False, —á—Ç–æ–±—ã –Ω–µ —É–±–∏–≤–∞—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ñ–∞–π–ª–æ–≤
    # –ù–æ —Ç–µ–ø–µ—Ä—å Flask –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –∏ debug=True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    app.run(debug=False, host='0.0.0.0', port=5000, use_reloader=True) # –ò–ª–∏ debug=True, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω hot-reload –¥–ª—è API

# backend/integrations/telegram_wrapper.py
import os
import logging
import asyncio
from pyrogram import Client, filters
from dotenv import load_dotenv
from database import save_message_to_db, Notification
from services.notification_processor import calculate_importance

load_dotenv()
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.api_id = int(os.getenv("TELEGRAM_API_ID"))
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.session_name = os.getenv("SESSION_NAME", "my_session")
        self.target_chat_id = int(os.getenv("TARGET_CHAT_ID", 0))
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ *–∑–¥–µ—Å—å*, –Ω–æ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ _run_bot
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ loop'–∞
        # –ù–æ –¥–ª—è Pyrogram Client —ç—Ç–æ –æ–±—ã—á–Ω–æ –Ω–µ —Ç–∞–∫. –û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å.
        self.client = Client(self.session_name, api_id=self.api_id, api_hash=self.api_hash)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ *–≤–Ω—É—Ç—Ä–∏* –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ _run_bot
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º loop'–µ
        # –ù–ï–¢, —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ @self.client.on_message –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        # –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞, –∞ –Ω–µ –≤ _run_bot

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ _run_bot
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ add_handler
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–ª–∞—Å—Å–∞, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ loop'–µ."""
        # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @self.client.on_message –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        # –û–Ω —Å–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ—ë –≤ –∫–ª–∏–µ–Ω—Ç Pyrogram
        # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (app.start() –≤—ã–∑–≤–∞–Ω) –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on_message(filters.private)
        async def handle_private_message(client, message):
            await self._process_message(message)

    async def _process_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id if message.from_user else 'Unknown'} —Å ID {message.id}")
        if not message.from_user:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
            return

        # --- –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø Pyrogram Message –≤ –Ω–∞—à—É –º–æ–¥–µ–ª—å Notification (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
        from_user = message.from_user
        chat = message.chat

        first_name = from_user.first_name or ""
        last_name = from_user.last_name or ""
        full_name = f"{first_name} {last_name}".strip()

        if chat.title:
            chat_title = chat.title
        elif chat.first_name:
            chat_title = f"{chat.first_name} {chat.last_name or ''}".strip()
        else:
            chat_title = str(chat.id)

        text_content = message.text or message.caption or ""
        media_type = None
        if message.photo: media_type = "photo"
        elif message.document: media_type = "document"
        elif message.video: media_type = "video"
        elif message.voice: media_type = "voice"
        elif message.audio: media_type = "audio"
        elif message.sticker: media_type = "sticker"
        elif message.animation: media_type = "animation"

        msg_date = message.date.isoformat()

        notification = Notification(
            source='telegram',
            from_user_id=from_user.id,
            from_name=full_name,
            chat_id=chat.id,
            chat_title=chat_title,
            text_content=text_content,
            media_type=media_type,
            date=msg_date,
            message_id=str(message.id), # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            raw_message=str(message)[:1000]
        )

        notification.importance = calculate_importance(notification)
        notification.status = 'unread'
        # --- –ö–û–ù–ï–¶ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò ---

        # --- –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ ---
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç {notification.from_name} (TG)")
        logger.debug(f"–û–±—ä–µ–∫—Ç Notification: {notification}") # –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        # –ò–ª–∏, –µ—Å–ª–∏ debug —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º info —Å –∫–ª—é—á–µ–≤—ã–º–∏ –ø–æ–ª—è–º–∏:
        logger.info(f"  - ID: {notification.id} (–æ–∂–∏–¥–∞–µ—Ç—Å—è None)")
        logger.info(f"  - Source: {notification.source}")
        logger.info(f"  - From User ID: {notification.from_user_id}")
        logger.info(f"  - From Name: {notification.from_name}")
        logger.info(f"  - Chat ID: {notification.chat_id}")
        logger.info(f"  - Chat Title: {notification.chat_title}")
        logger.info(f"  - Text Content: '{notification.text_content}'")
        logger.info(f"  - Media Type: {notification.media_type}")
        logger.info(f"  - Date: {notification.date}")
        logger.info(f"  - Message ID: {notification.message_id}")
        logger.info(f"  - Importance: {notification.importance}")
        logger.info(f"  - Status: {notification.status}")
        # --- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ---

        notification_id = save_message_to_db(notification)
        if notification_id:
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç {notification.from_name} (TG) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î —Å ID {notification_id}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç TG –æ—Ç {from_user.id}. Text: '{text_content}'")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º asyncio event loop –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ç–æ–∫–µ."""
        return
        logger.info("ü§ñ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º loop'–µ...")
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π asyncio loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            logger.info("‚úÖ –ù–æ–≤—ã–π asyncio loop —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞.")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é _run_bot –≤ —ç—Ç–æ–º loop
            # run_until_complete –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ *–≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞* –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è _run_bot
            # _run_bot –≤—ã–∑—ã–≤–∞–µ—Ç app.start() –∏ app.idle(), —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å
            loop.run_until_complete(self._run_bot())
            # loop.run_until_complete(self._run_bot())
            loop.close()
            logger.info("‚úÖ asyncio loop –¥–ª—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç.")
        except KeyboardInterrupt:
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–Ω—É—Ç—Ä–∏ run).")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ (–≤–Ω—É—Ç—Ä–∏ run): {e}")
            if not loop.is_closed():
                 loop.close()

    async def _run_bot(self):
        return
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        logger.info("ü§ñ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞, –Ω–æ
            # –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ loop'–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–º –≤ run()
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ @self.client.on_message —Å–≤—è–∑—ã–≤–∞–µ—Ç
            # —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º loop'–µ
            await self.client.start() # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            logger.info("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º app.idle() —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª *–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å* —Å–æ–æ–±—â–µ–Ω–∏—è
            # idle() –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.client.idle()
            # –ï—Å–ª–∏ idle() –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        finally:
            logger.info("ü§ñ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            await self.client.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
